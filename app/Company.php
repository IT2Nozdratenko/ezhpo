<?php

namespace App;

use App\Models\Contract;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Company extends Model
{
    use \Illuminate\Database\Eloquent\SoftDeletes;

    public $fillable = [
        'hash_id', 'name',
        'note', 'comment', 'procedure_pv',
        'user_id', 'req_id',
        'pv_id', 'town_id', 'products_id', 'where_call', 'where_call_name', 'inn',

        'dismissed',
        'has_actived_prev_month',
        'bitrix_link',
        'document_bdd',
        'deleted_id',
    ];

    public function responsible(): BelongsTo
    {
        return $this->belongsTo(User::class, 'user_id', 'id');
    }

    public function deleted_user(): BelongsTo
    {
        return $this->belongsTo(User::class, 'deleted_id', 'id')
            ->withDefault();
    }

    public function contracts()
    {
        return $this->hasMany(
            Contract::class,
            'company_id',
            'id'
        );
    }

    public function inspections_tech() : HasMany
    {
        return $this->hasMany(Anketa::class, 'company_id', 'id')
                    ->where('type_anketa', 'tech');
    }
    public function inspections_medic()
    {
        return $this->hasMany(Anketa::class, 'company_id', 'id')
                    ->where('type_anketa', 'medic');
    }
    public function inspections_pechat_pl()
    {
        return $this->hasMany(Anketa::class, 'company_id', 'id')
                    ->where('type_anketa', 'pechat_pl');
    }
    public function inspections_bdd()
    {
        return $this->hasMany(Anketa::class, 'company_id', 'id')
                    ->where('type_anketa', 'bdd');
    }
    public function inspections_report_cart()
    {
        return $this->hasMany(Anketa::class, 'company_id', 'id')
                    ->where('type_anketa', 'report_cart');
    }

    public function cars(): HasMany
    {
        return $this->hasMany(Car::class, 'company_id', 'id');
    }
    public function drivers()
    {
        return $this->hasMany(Driver::class, 'company_id', 'id');
    }

    public function delete()
    {
        $this->deleted_id = user()->id;
        $this->save();
        return parent::delete(); // TODO: Change the autogenerated stub
    }

    public static function getAll () {
        $user = auth()->user();

        if($user->hasRole('client')) {
            $c_id = User::getUserCompanyId('id');

            if($c_id) {
                return self::find($c_id)->get();
            }
        }

        return self::all();
    }

    public function getName ($id, $field = 'id')
    {
        $company = Company::where($field, $id)->first();

        if(!$company) $company = '';
        else $company = $company['name'];

        return $company;
    }
}
