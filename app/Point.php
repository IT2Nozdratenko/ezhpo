<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Query\Builder;

/**
 * App\Point
 *
 * @property int $id
 * @property string $hash_id
 * @property string $name
 * @property int $pv_id
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property int|null $company_id
 * @property string|null $deleted_id
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property-read \App\User|null $deleted_user
 * @property-read \App\Town $town
 * @method static \Illuminate\Database\Eloquent\Builder|Point newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Point newQuery()
 * @method static Builder|Point onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|Point query()
 * @method static \Illuminate\Database\Eloquent\Builder|Point whereCompanyId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Point whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Point whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Point whereDeletedId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Point whereHashId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Point whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Point whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Point wherePvId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Point whereUpdatedAt($value)
 * @method static Builder|Point withTrashed()
 * @method static Builder|Point withoutTrashed()
 * @mixin \Eloquent
 */
class Point extends Model
{
    use SoftDeletes;

    public $fillable
        = [
            'hash_id',
            'name',
            'pv_id',
            'company_id',
            'deleted_id',
        ];

    // Получение пункта выпуска
    public static function getPointText($id = 0)
    {
        $point = Point::find($id);

        if ($point) {
            $point = $point->name;
        } else {
            $point = '';
        }

        return $point;
    }

    public function deleted_user()
    {
        return $this->belongsTo(User::class, 'deleted_id', 'id')
                    ->withDefault();
    }

    public function delete()
    {
        $this->deleted_id = user()->id;
        $this->save();

        return parent::delete(); // TODO: Change the autogenerated stub
    }

    public function town()
    {
        return $this->belongsTo(Town::class, 'pv_id');
    }

    // Получение всех пунктов
    public static function getAll($basic = false)
    {
        $towns = Town::all();

        if ( !$basic) {
            $result_points_towns = [];

            // Ищем дочерние элемеенты
            foreach ($towns as $town) {
                $data = [
                    'name' => $town->name,
                    'id'   => $town->id,
                    'pvs'  => Point::where('pv_id', $town->id)->get(),
                ];

                array_push($result_points_towns, $data);
            }

            return $result_points_towns;
        } else {
            return self::all();
        }
    }

}
