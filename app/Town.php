<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Query\Builder;

/**
 * App\Town
 *
 * @property int $id
 * @property string $hash_id
 * @property string $name
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property string|null $deleted_id
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property-read \App\User|null $deleted_user
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Point[] $pvs
 * @property-read int|null $pvs_count
 * @method static \Illuminate\Database\Eloquent\Builder|Town newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Town newQuery()
 * @method static Builder|Town onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|Town query()
 * @method static \Illuminate\Database\Eloquent\Builder|Town whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Town whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Town whereDeletedId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Town whereHashId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Town whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Town whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Town whereUpdatedAt($value)
 * @method static Builder|Town withTrashed()
 * @method static Builder|Town withoutTrashed()
 * @mixin \Eloquent
 */
class Town extends Model
{
    use SoftDeletes;

    public $fillable
        = [
            'id',
            'hash_id',
            'name',
            'deleted_id',
        ];

    public function pvs()
    {
        return $this->hasMany(Point::class, 'pv_id');
    }


    public function delete()
    {
        $this->deleted_id = user()->id;
        $this->save();

        return parent::delete(); // TODO: Change the autogenerated stub
    }

    public function deleted_user()
    {
        return $this->belongsTo(User::class, 'deleted_id', 'id')
                    ->withDefault();
    }

    public static function getName($id)
    {
        $id = explode(',', $id);

        $data = self::whereIn('id', $id)->get();

        if ( !$data) {
            $data = '';
        } else {
            $newData = '';

            foreach ($data as $dataItemKey => $dataItem) {
                $newData .= ($dataItemKey !== 0 ? ', ' : '').$dataItem->name;
            }

            $data = $newData;
        }

        return $data;
    }

    public static function getAll()
    {
        return self::all();
    }
}
